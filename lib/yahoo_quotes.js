// Generated by CoffeeScript 1.6.3
(function() {
  var DividendQuote, EventEmitter, ISODateParser, PriceQuote, YahooQuotes, http, isNumber,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  EventEmitter = require('events').EventEmitter;

  ISODateParser = require('iso_date_parser');

  PriceQuote = (function() {
    function PriceQuote(row) {
      var adj_close, close_price, high_price, low_price, open_price, volume;
      this.iso_date = row[0], open_price = row[1], high_price = row[2], low_price = row[3], close_price = row[4], volume = row[5], adj_close = row[6];
      this.open_price = Number(open_price);
      this.high_price = Number(high_price);
      this.low_price = Number(low_price);
      this.close_price = Number(close_price);
      this.volume = Number(volume);
      this.adj_close = Number(adj_close);
    }

    return PriceQuote;

  })();

  DividendQuote = (function() {
    function DividendQuote(row) {
      var dividend;
      this.iso_date = row[0], dividend = row[1];
      this.dividend = Number(dividend);
    }

    return DividendQuote;

  })();

  YahooQuotes = (function(_super) {
    __extends(YahooQuotes, _super);

    function YahooQuotes(ticker, iso_start_date, iso_end_date, result_type) {
      var a, b, c, d, data, e, end_date, f, g, hostname, options, request, result_type_symbol, self, start_date, url, url_path;
      if (result_type == null) {
        result_type = 'prices';
      }
      /*
      		Get historical prices or dividends for the given ticker symbol.
      		Returns a nested list of either prices or dividends depending on result_type.
      */

      start_date = new ISODateParser(iso_start_date);
      end_date = new ISODateParser(iso_end_date);
      switch (result_type) {
        case "prices":
          result_type_symbol = 'd';
          break;
        case 'weekly_prices':
          result_type_symbol = 'w';
          break;
        case "monthly_prices":
          result_type_symbol = 'm';
          break;
        case 'dividends':
          result_type_symbol = 'v';
          break;
        default:
          throw new Error("cannot understand result_type " + result_type);
      }
      d = end_date.get_zero_based_month().toString();
      e = end_date.day.toString();
      f = end_date.year.toString();
      g = result_type_symbol;
      a = start_date.get_zero_based_month().toString();
      b = start_date.day.toString();
      c = start_date.year.toString();
      hostname = "ichart.yahoo.com";
      url = "http://ichart.yahoo.com/";
      url_path = "/table.csv?s=" + ticker + "&";
      url_path += "d=" + d + "&";
      url_path += "e=" + e + "&";
      url_path += "f=" + f + "&";
      url_path += "g=" + g + "&";
      url_path += "a=" + a + "&";
      url_path += "b=" + b + "&";
      url_path += "c=" + c + "&";
      url_path += "ignore=.csv";
      options = {
        hostname: hostname,
        port: 80,
        path: url_path,
        method: 'GET'
      };
      self = this;
      data = "";
      request = http.get(options, function(res) {
        res.on("data", function(chunk) {
          return data += chunk;
        });
        res.on("error", function(err) {
          return self.emit('error', err);
        });
        return res.on("end", function() {
          var constructor, yahoo_rec_list;
          constructor = result_type === "dividends" ? DividendQuote : PriceQuote;
          yahoo_rec_list = self.get_rec_list(ticker, data, constructor);
          if ((yahoo_rec_list == null) || yahoo_rec_list.length === 0) {
            return self.emit('data', []);
          } else if (result_type === 'dividends' && !self.valid_dividend_quote(yahoo_rec_list[0])) {
            return self.emit('data', []);
          } else if (result_type !== 'dividends' && !self.valid_price_quote(yahoo_rec_list[0])) {
            return self.emit('data', []);
          } else {
            return self.emit("data", yahoo_rec_list);
          }
        });
      });
    }

    YahooQuotes.prototype.valid_price_quote = function(quote) {
      var date_array;
      if (!quote.iso_date) {
        return false;
      }
      date_array = quote.iso_date.split("-");
      if (date_array.length !== 3) {
        return false;
      }
      if (!quote.volume) {
        return false;
      }
      if (!isNumber(quote.volume)) {
        return false;
      }
      return true;
    };

    YahooQuotes.prototype.valid_dividend_quote = function(quote) {
      var date_array;
      if (!quote.iso_date) {
        return false;
      }
      date_array = quote.iso_date.split("-");
      if (date_array.length !== 3) {
        return false;
      }
      if (!quote.dividend) {
        return false;
      }
      if (!isNumber(quote.dividend)) {
        return false;
      }
      return true;
    };

    YahooQuotes.prototype.get_rec_list = function(ticker, data, constructor) {
      var csv_line, r, rec_list, row, _i, _len, _ref;
      rec_list = [];
      _ref = data.split("\n").slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        csv_line = _ref[_i];
        csv_line.replace(/^\s+|\s+$/g, '');
        if (csv_line !== '') {
          row = csv_line.split(",");
          r = new constructor(row);
          rec_list.push(r);
        }
      }
      rec_list.sort(function(a, b) {
        if (a.iso_date > b.iso_date) {
          return 1;
        }
        if (a.iso_date < b.iso_date) {
          return -1;
        }
        return 0;
      });
      return rec_list;
    };

    return YahooQuotes;

  })(EventEmitter);

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  module.exports = YahooQuotes;

}).call(this);
